package com.ua.kture.opentest.dao;

import com.ua.kture.opentest.domain.User;
import com.ua.kture.opentest.exceptions.UserException;
import org.apache.log4j.Logger;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by Маша on 16.02.14.
 */
@Repository
public class UserDao{
    Logger logger = Logger.getLogger("UserDao");
    //@PersistenceContext(unitName = "opentest", type = PersistenceContextType.EXTENDED)
    //private EntityManager entityManager;
    @Autowired
    private SessionFactory sessionFactory;

    public User save(User user) {
        Session session = sessionFactory.getCurrentSession();
        Transaction transaction = session.beginTransaction();
        session.save(user);
        transaction.commit();
        return user;
    };

    public void update(User user) {

    };

    public User delete(Long userId) {
        Session session = sessionFactory.getCurrentSession();
        Transaction transaction = session.beginTransaction();
        User user = (User) this.sessionFactory.getCurrentSession().get(User.class, userId);
        if(user != null) {
            this.sessionFactory.getCurrentSession().delete(user);
        }
        transaction.commit();
        return user;
    };

    public User getUserById(Long userId) {
        Session session = sessionFactory.getCurrentSession();
        Transaction transaction = session.beginTransaction();
        User user = (User) this.sessionFactory.getCurrentSession().get(User.class, userId);
        transaction.commit();
        return user;
    }

    public List<User> getAllUsers() {
        List<User> foundedUsers = new ArrayList<User>();
//        List<User> users;
//        Session session = sessionFactory.getCurrentSession();

//        CriteriaBuilder cb = entityManager.getCriteriaBuilder();
//
//        CriteriaQuery<User> q = cb.createQuery(User.class);
//        Root<User> c = q.from(User.class);
//        ParameterExpression<String> p = cb.parameter(String.class);
//        q.select(c);
//        TypedQuery<User> query = entityManager.createQuery(q);
//
//        foundedUsers = query.getResultList();

//        Transaction transaction = session.beginTransaction();
//        users = session.createQuery("from users").list();
//        transaction.commit();

        return foundedUsers;
    }

    public User getUserByLogin(String login) throws UserException {
        Session session = sessionFactory.getCurrentSession();
        Transaction transaction = session.beginTransaction();

        Query query = session.createQuery("from User where login = :login ");
        query.setParameter("login", login);
        List list = query.list();
        if(list.isEmpty()) {
            //transaction.commit();
            throw new UserException("User not found");
        }
        User user = (User)list.get(0);
        transaction.commit();
        logger.info("Logged user: " + user.toString());
        return user;
    }
}
