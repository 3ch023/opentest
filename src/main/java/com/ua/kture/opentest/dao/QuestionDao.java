package com.ua.kture.opentest.dao;

import com.ua.kture.opentest.domain.Question;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by Маша on 02.03.14.
 */
@Repository
public class QuestionDao {
    @Autowired
    private SessionFactory sessionFactory;

    public Question save(Question question) {
        Session session = sessionFactory.getCurrentSession();
        Transaction transaction = session.beginTransaction();
        Long id = (Long) session.save(question);
        transaction.commit();
        question.setId(id);
        return question;
    };

    public void update(Question question) {
        Session session = sessionFactory.getCurrentSession();
        Transaction transaction = session.beginTransaction();

        session.update(question);

        transaction.commit();
    };

    public Question delete(Long questionId) {
        Question question = (Question) this.sessionFactory.getCurrentSession().load(Question.class, questionId);
        if(question != null) {
            this.sessionFactory.getCurrentSession().delete(question);
        }
        return question;
    };

    public Question getQuestionById(Long questionId) {
        Session session = sessionFactory.getCurrentSession();
        Transaction transaction = session.beginTransaction();
        Question question = (Question) session.get(Question.class, questionId);
        transaction.commit();
        return question;
    }

    public List<Question> getAllQuestions() {
        return this.sessionFactory.getCurrentSession().createQuery("from question").list();
    }

    public void setSessionFactory(SessionFactory sessionFactory) {
        this.sessionFactory = sessionFactory;
    }

    public List<Question> getQuestionsByTestId(Long testId) {
        List<Question> questions = new ArrayList<Question>();

        return questions;
    }

    public List<Long> getQuestionIds(Long testId) {
        List<Long> questionIds = new ArrayList<Long>();
        questionIds.add(0l);

        Session session = sessionFactory.getCurrentSession();
        Transaction transaction = session.beginTransaction();

        Query query = session.createQuery("select q.id FROM Question q, Test t " +
                "WHERE t.id = q.testId AND t.id = :testId ");
        query.setParameter("testId", testId);

        List list = query.list();
        for(Object o : list) {
            questionIds.add((Long) o);
        }

        transaction.commit();
        return questionIds;
    }
}
